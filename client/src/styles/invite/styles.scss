@use "./partials/reset";
@use "./partials/mixin" as m;
@use "./partials/contents" as c;

@property --seconds {
    syntax: "<integer>";
    initial-value: 0;
    inherits: false;
}

@property --minutes {
    syntax: "<integer>";
    initial-value: 0;
    inherits: false;
}

@property --hours {
    syntax: "<integer>";
    initial-value: 0;
    inherits: false;
}

@property --days {
    syntax: "<integer>";
    initial-value: 0;
    inherits: false;
}

[role="main"] {
    display: flex;
    flex-direction: column;
}

.full {
    display: flex;
    position: fixed;
    width: 100%;
    height: 100%;
    overflow: hidden;
    background-color: #fff;

    &-wrap {
        display: flex;
        position: absolute;
        top: 50%;
        left: 50%;
        width: 500px;
        height: 30%;
        margin-top: -60px;
        background-color: #fff;
        box-shadow: 0 0 10px rgb(0 0 0 / .3);
        transform: translate(-50%, -50%);

        &:before {
            content: "";
            position: absolute;
            top: 50%;
            left: 0;
            margin-top: -20px;
            width: 100%;
            height: 40px;
            background-color: rgb(0 0 0 / .2);
        }
    }

    ul {
        flex: 1;
        display: flex;
        flex-direction: column;
        overflow-x: hidden;
        overflow-y: auto;
        scrollbar-width: none;
        scroll-snap-type: y mandatory;
        isolation: isolate;
    }

    li {
        flex-shrink: 0;
        height: 40px;
        scroll-snap-align: center;

        &:first-of-type {
            margin-top: calc(50% + 20px);
        }

        &:last-of-type {
            margin-bottom: calc(50% + 20px);
        }
    }

    input[type="radio"] {
        display: none;

        &:checked {
            + label {
                font-weight: 900;
            }
        }
    }

    label {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100%;
        height: 40px;
        cursor: pointer;
    }
}

.a11y {
    position: absolute;
    white-space: nowrap;
    width: 1px;
    height: 1px;
    overflow: hidden;
    border: 0;
    padding: 0;
    clip: rect(0 0 0 0);
    clip-path: inset(50%);
    margin: -1px;
}

.header {
    flex-shrink: 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
    position: sticky;
    background-color: rgb(255 255 255 / .05);
    backdrop-filter: blur(3px);
    box-sizing: border-box;
    color: #fff;
    z-index: 13;
    @include m.respond-to(map-get(m.$min, 1024)) {
        top: 20px;
        left: 0;
        width: 90%;
        height: 100px;
        margin: 0 auto;
        padding: 0 50px;
        box-shadow: 0 0 0 1px rgb(255 255 255 / .3) inset;
        border-radius: 50px;
    }

    @include m.respond-to(map-get(m.$max, 1023)) {
        top: 0;
        left: 0;
        width: 100%;
        height: 60px;
        padding: 0 20px;
    }

    .title {
        font-weight: 900;
        font-size: m.$fontTitle;
        @include m.fonts("m");
    }

    .timer {
        font-size: m.$fontTitle;
        font-weight: 900;
        color: m.$white;
        text-align: center;

        &-title {
            font-size: m.$fontBody;
        }

        &-count {
            display: flex;
            justify-content: center;
            flex-wrap: nowrap;
            padding-top: 5px;
            gap: 4px;
            font-size: m.$fontTitle;
            transform: translateZ(0);

            li {
                display: flex;
            }

            $timers: days, hours, minutes, seconds;
            $sixteen: 60;
            @each $timer in $timers {
                .#{$timer} {
                    .number {
                        @if ($timer == minutes) {
                            animation: #{$timer} #{$sixteen * $sixteen}s steps($sixteen, jump-none) infinite;
                        } @else if ($timer == hours) {
                            animation: #{$timer} #{$sixteen * $sixteen * 24}s steps(24, jump-none) infinite;
                        } @else if ($timer == days) {
                            animation: #{$timer} #{$sixteen * $sixteen * 24 * 365}s steps(365, jump-none) infinite;
                        } @else {
                            animation: #{$timer} #{$sixteen}s steps($sixteen, jump-none) infinite;
                        }
                        animation-delay: var(--delay-#{$timer}, 0s);
                        counter-reset: #{$timer} var(--#{$timer});

                        &::before {
                            content: counter(#{$timer}, decimal-leading-zero) " ";
                        }
                    }
                }
            }
        }
    }
}

.button {
    &-info {
        display: inline-flex;
        justify-content: center;
        align-items: center;
        width: 40px;
        height: 40px;
        border-radius: 20px;
        box-sizing: border-box;
        cursor: pointer;
        font-weight: 900;
        font-size: m.$fontTitle;
        font-family: Apple Color Emoji, "Segoe UI Emoji", "Noto Color Emoji", serif;
    }
}

@include c.contents;

.footer {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 60px;
    isolation: isolate;
    background-color: m.$white;
    font-size: m.$fontSub;
    @include m.fonts("a");
}
